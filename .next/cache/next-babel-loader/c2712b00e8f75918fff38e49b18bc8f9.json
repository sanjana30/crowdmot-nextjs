{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button, Collapse, Badge, ListGroupItem } from 'reactstrap';\nimport { MdCallSplit, MdDelete } from 'react-icons/md';\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { IoMdEyeOff, IoMdEye } from 'react-icons/io';\nimport { SPLIT, HIDE, SHOW } from '/Applications/CrowdMOT/crowdmot-nextjs/components/models/2DVideo.js';\nimport IncidentList from '../../IncidentList/IncidentList.jsx';\nimport TwoDimensionalVideoContext from '../../TwoDimensionalVideo/twoDimensionalVideoContext';\nimport OpenDialogButton from '../../OpenDialogButton/OpenDialogButton.jsx';\nimport { isDialogDisabledConst } from '../isDialogDisabledReducer';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './annotationItem.scss';\n\nvar AnnotationItem = function AnnotationItem(_ref) {\n  var className = _ref.className,\n      itemData = _ref.itemData,\n      isDialogDisabled = _ref.isDialogDisabled,\n      dispatchIsDialogDisabled = _ref.dispatchIsDialogDisabled;\n  var twoDimensionalVideoContext = useContext(TwoDimensionalVideoContext);\n  var played = twoDimensionalVideoContext.played,\n      entities = twoDimensionalVideoContext.entities,\n      focusing = twoDimensionalVideoContext.focusing,\n      isEmptyCheckEnable = twoDimensionalVideoContext.isEmptyCheckEnable,\n      isSplitEnable = twoDimensionalVideoContext.isSplitEnable,\n      isShowHideEnable = twoDimensionalVideoContext.isShowHideEnable,\n      emptyCheckAnnotationItemWarningText = twoDimensionalVideoContext.emptyCheckAnnotationItemWarningText,\n      onAnnotationItemClick = twoDimensionalVideoContext.onAnnotationItemClick,\n      onAnnotationDeleteClick = twoDimensionalVideoContext.onAnnotationDeleteClick,\n      onAnnotationShowHideClick = twoDimensionalVideoContext.onAnnotationShowHideClick,\n      onAnnotationSplitClick = twoDimensionalVideoContext.onAnnotationSplitClick;\n\n  var _useState = useState(false),\n      isIncidentListOpen = _useState[0],\n      setIsIncidentListOpen = _useState[1];\n\n  var _useTranslation = useTranslation('twoDimensionalVideo'),\n      t = _useTranslation.t;\n\n  var incidents = itemData.incidents,\n      name = itemData.name,\n      label = itemData.label,\n      color = itemData.color,\n      parentName = itemData.parentName,\n      childrenNames = itemData.childrenNames;\n  var parentAnnotation = entities.annotations[parentName];\n  var childrenUI = childrenNames.map(function (c) {\n    return __jsx(Button, {\n      color: \"link\",\n      key: c,\n      onClick: function onClick() {\n        return onAnnotationItemClick(c);\n      },\n      className: \"video-ann-relatives\"\n    }, \"\".concat(entities.annotations[c].label, \" \"));\n  });\n\n  var showButtonUI = __jsx(OpenDialogButton, {\n    className: \"d-flex align-items-center annotation-item__control-button\",\n    outline: true,\n    title: t('dialogTitleShow'),\n    message: t('dialogMessageShow'),\n    isDialogDisabled: isDialogDisabled.show,\n    onYesClick: function onYesClick() {\n      return onAnnotationShowHideClick({\n        name: name,\n        status: SHOW\n      });\n    },\n    onDontShowAgainChange: function onDontShowAgainChange(e) {\n      return dispatchIsDialogDisabled({\n        type: isDialogDisabledConst.SHOW,\n        value: e.target.checked\n      });\n    }\n  }, __jsx(IoMdEye, null), SHOW);\n\n  var hideButtonUI = __jsx(OpenDialogButton, {\n    className: \"d-flex align-items-center annotation-item__control-button\",\n    outline: true,\n    title: t('dialogTitleHide'),\n    message: t('dialogMessageHide'),\n    isDialogDisabled: isDialogDisabled.hide,\n    onYesClick: function onYesClick() {\n      return onAnnotationShowHideClick({\n        name: name,\n        status: HIDE\n      });\n    },\n    onDontShowAgainChange: function onDontShowAgainChange(e) {\n      return dispatchIsDialogDisabled({\n        type: isDialogDisabledConst.HIDE,\n        value: e.target.checked\n      });\n    }\n  }, __jsx(IoMdEyeOff, null), HIDE);\n\n  var splitButtonUI = __jsx(OpenDialogButton, {\n    className: \"d-flex align-items-center annotation-item__control-button\",\n    outline: true,\n    title: t('dialogTitleSplit'),\n    message: t('dialogMessageSplit'),\n    isDialogDisabled: isDialogDisabled.split,\n    onYesClick: function onYesClick() {\n      return onAnnotationSplitClick(name);\n    },\n    onDontShowAgainChange: function onDontShowAgainChange(e) {\n      return dispatchIsDialogDisabled({\n        type: isDialogDisabledConst.HIDE,\n        value: e.target.checked\n      });\n    }\n  }, __jsx(MdCallSplit, null), SPLIT);\n\n  var currentIncident = _toConsumableArray(incidents).reverse().find(function (incident) {\n    return played >= incident.time;\n  }) || {};\n\n  switch (currentIncident.status) {\n    case SHOW:\n      showButtonUI = null;\n      break;\n\n    case HIDE:\n      hideButtonUI = null;\n      splitButtonUI = null;\n      break;\n\n    case SPLIT:\n      showButtonUI = null;\n      hideButtonUI = null;\n      break;\n\n    default:\n      showButtonUI = null;\n      hideButtonUI = null;\n      splitButtonUI = null;\n      break;\n  }\n\n  var warningText = isEmptyCheckEnable && incidents.length < 2 && __jsx(\"span\", {\n    className: \"text-danger\"\n  }, emptyCheckAnnotationItemWarningText);\n\n  var rootClassName = \"annotation-item\".concat(className ? \" \".concat(className) : '');\n\n  if (name !== focusing) {\n    return __jsx(ListGroupItem, {\n      className: rootClassName,\n      name: name,\n      onClick: function onClick() {\n        return onAnnotationItemClick(name);\n      },\n      action: true\n    }, __jsx(\"div\", {\n      className: \"d-flex w-100 justify-content-between align-items-center\"\n    }, __jsx(\"div\", null, label)), __jsx(\"div\", null, warningText));\n  }\n\n  rootClassName = \"\".concat(rootClassName, \" annotation-item--highlight\");\n  return __jsx(ListGroupItem, {\n    className: rootClassName,\n    name: name,\n    style: {\n      borderColor: color.replace(/,1\\)/, ',.3)')\n    }\n  }, __jsx(\"div\", {\n    className: \"d-flex align-items-center mb-2\"\n  }, __jsx(\"div\", {\n    className: \"mr-auto\"\n  }, __jsx(\"strong\", null, label)), isSplitEnable && splitButtonUI, isShowHideEnable && hideButtonUI, showButtonUI, __jsx(OpenDialogButton, {\n    className: \"d-flex align-items-center annotation-item__delete-button\",\n    color: \"link\",\n    title: t('dialogTitleDelete'),\n    message: t('dialogMessageDelete'),\n    isDialogDisabled: isDialogDisabled[\"delete\"],\n    onYesClick: function onYesClick() {\n      return onAnnotationDeleteClick(name);\n    },\n    onDontShowAgainChange: function onDontShowAgainChange(e) {\n      return dispatchIsDialogDisabled({\n        type: isDialogDisabledConst.DELETE,\n        value: e.target.checked\n      });\n    }\n  }, __jsx(MdDelete, null))), __jsx(\"div\", null, parentAnnotation && __jsx(\"div\", null, __jsx(Badge, {\n    color: \"secondary\"\n  }, t('annotationItemParent')), __jsx(Button, {\n    color: \"link\",\n    onClick: function onClick() {\n      return onAnnotationItemClick(parentAnnotation.name);\n    },\n    className: \"annotation-item__parent-button\"\n  }, parentAnnotation.label))), __jsx(\"div\", null, childrenUI.length > 0 && __jsx(\"div\", null, __jsx(Badge, {\n    color: \"secondary\"\n  }, t('annotationItemChildren')), childrenUI)), __jsx(Button, {\n    color: \"link\",\n    className: \"d-flex align-items-center justify-content-between incident-list-toggle-button p-3 mt-2\",\n    onClick: function onClick() {\n      return setIsIncidentListOpen(!isIncidentListOpen);\n    },\n    style: {\n      marginBottom: 0\n    }\n  }, __jsx(\"div\", null, t('annotationItemIncidentHistory')), isIncidentListOpen ? __jsx(FaChevronUp, null) : __jsx(FaChevronDown, null)), __jsx(Collapse, {\n    isOpen: isIncidentListOpen\n  }, __jsx(IncidentList, {\n    incidents: incidents,\n    annotationName: name\n  })), __jsx(\"div\", {\n    className: \"mt-3\"\n  }, warningText));\n};\n\nAnnotationItem.defaultProps = {\n  className: '',\n  itemData: {},\n  dispatchIsDialogDisabled: function dispatchIsDialogDisabled() {},\n  isDialogDisabled: {}\n};\nexport default AnnotationItem;","map":null,"metadata":{},"sourceType":"module"}