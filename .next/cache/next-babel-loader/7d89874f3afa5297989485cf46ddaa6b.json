{"ast":null,"code":"import DatabaseService from \"../../services/database\";\nimport AuthService from \"../../services/auth\";\nimport User from \"../../models/User\";\nexport default (async (req, res) => {\n  if (req.method !== \"POST\") {\n    return res.status(405).end();\n  }\n\n  DatabaseService.connect();\n  const {\n    name,\n    email,\n    password,\n    isSignUp\n  } = req.body;\n  let user = await User.findOne({\n    email\n  });\n\n  if (isSignUp) {\n    if (user) {\n      return res.status(400).end(`An account already exists for email ${email}.`);\n    }\n\n    user = new User({\n      name,\n      email,\n      passwordId: await AuthService.createUser(password)\n    });\n    await user.save();\n  } else {\n    if (!user) {\n      return res.status(400).end(`No account exists for email ${email}`);\n    }\n\n    if (!(await AuthService.validatePassword(user.passwordId, password))) {\n      return res.status(401).end();\n    }\n  }\n\n  res.end(await AuthService.sign({\n    id: user._id\n  }));\n});","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/pages/api/authenticate.js"],"names":["DatabaseService","AuthService","User","req","res","method","status","end","connect","name","email","password","isSignUp","body","user","findOne","passwordId","createUser","save","validatePassword","sign","id","_id"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAEDP,EAAAA,eAAe,CAACQ,OAAhB;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBC,IAAAA;AAAzB,MAAsCT,GAAG,CAACU,IAAhD;AACA,MAAIC,IAAI,GAAG,MAAMZ,IAAI,CAACa,OAAL,CAAa;AAAEL,IAAAA;AAAF,GAAb,CAAjB;;AAEA,MAAIE,QAAJ,EAAc;AACZ,QAAIE,IAAJ,EAAU;AACR,aAAOV,GAAG,CACPE,MADI,CACG,GADH,EAEJC,GAFI,CAEC,uCAAsCG,KAAM,GAF7C,CAAP;AAGD;;AAEDI,IAAAA,IAAI,GAAG,IAAIZ,IAAJ,CAAS;AACdO,MAAAA,IADc;AAEdC,MAAAA,KAFc;AAGdM,MAAAA,UAAU,EAAE,MAAMf,WAAW,CAACgB,UAAZ,CAAuBN,QAAvB;AAHJ,KAAT,CAAP;AAMA,UAAMG,IAAI,CAACI,IAAL,EAAN;AACD,GAdD,MAcO;AACL,QAAI,CAACJ,IAAL,EAAW;AACT,aAAOV,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAqB,+BAA8BG,KAAM,EAAzD,CAAP;AACD;;AAED,QAAI,EAAE,MAAMT,WAAW,CAACkB,gBAAZ,CAA6BL,IAAI,CAACE,UAAlC,EAA8CL,QAA9C,CAAR,CAAJ,EAAsE;AACpE,aAAOP,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;AACF;;AAEDH,EAAAA,GAAG,CAACG,GAAJ,CACE,MAAMN,WAAW,CAACmB,IAAZ,CAAiB;AACrBC,IAAAA,EAAE,EAAEP,IAAI,CAACQ;AADY,GAAjB,CADR;AAKD,CAvCD","sourcesContent":["import DatabaseService from \"../../services/database\";\nimport AuthService from \"../../services/auth\";\nimport User from \"../../models/User\";\n\nexport default async (req, res) => {\n  if (req.method !== \"POST\") {\n    return res.status(405).end();\n  }\n\n  DatabaseService.connect();\n\n  const { name, email, password, isSignUp } = req.body;\n  let user = await User.findOne({ email });\n\n  if (isSignUp) {\n    if (user) {\n      return res\n        .status(400)\n        .end(`An account already exists for email ${email}.`);\n    }\n\n    user = new User({\n      name,\n      email,\n      passwordId: await AuthService.createUser(password),\n    });\n\n    await user.save();\n  } else {\n    if (!user) {\n      return res.status(400).end(`No account exists for email ${email}`);\n    }\n\n    if (!(await AuthService.validatePassword(user.passwordId, password))) {\n      return res.status(401).end();\n    }\n  }\n\n  res.end(\n    await AuthService.sign({\n      id: user._id,\n    })\n  );\n};"]},"metadata":{},"sourceType":"module"}