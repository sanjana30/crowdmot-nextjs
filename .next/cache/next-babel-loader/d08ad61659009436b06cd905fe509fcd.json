{"ast":null,"code":"import DatabaseService from \"../../services/database\";\nimport AuthService from \"../../services/auth\";\nimport User from \"../../models/user\";\nexport default (async (req, res) => {\n  if (req.method !== \"GET\") {\n    return res.status(405).end();\n  }\n\n  const {\n    authorization\n  } = req.headers;\n  let userId;\n\n  try {\n    const {\n      id\n    } = await AuthService.verify(authorization);\n    userId = id;\n  } catch (error) {\n    return res.status(401).end();\n  }\n\n  DatabaseService.connect();\n  const user = await User.findOne({\n    _id: userId\n  }, {\n    name: -1\n  }, {\n    email: -1\n  });\n  res.json(user.toObject());\n});","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/pages/api/user.js"],"names":["DatabaseService","AuthService","User","req","res","method","status","end","authorization","headers","userId","id","verify","error","connect","user","findOne","_id","name","email","json","toObject"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,yBAA5B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAoBL,GAAG,CAACM,OAA9B;AAEA,MAAIC,MAAJ;;AAEA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAS,MAAMV,WAAW,CAACW,MAAZ,CAAmBJ,aAAnB,CAArB;AAEAE,IAAAA,MAAM,GAAGC,EAAT;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,WAAOT,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAEDP,EAAAA,eAAe,CAACc,OAAhB;AAEA,QAAMC,IAAI,GAAG,MAAMb,IAAI,CAACc,OAAL,CAAa;AAAEC,IAAAA,GAAG,EAAEP;AAAP,GAAb,EAA8B;AAAEQ,IAAAA,IAAI,EAAE,CAAC;AAAT,GAA9B,EAA4C;AAACC,IAAAA,KAAK,EAAE,CAAC;AAAT,GAA5C,CAAnB;AAEAf,EAAAA,GAAG,CAACgB,IAAJ,CAASL,IAAI,CAACM,QAAL,EAAT;AACD,CAtBD","sourcesContent":["import DatabaseService from \"../../services/database\";\nimport AuthService from \"../../services/auth\";\nimport User from \"../../models/user\";\n\nexport default async (req, res) => {\n  if (req.method !== \"GET\") {\n    return res.status(405).end();\n  }\n\n  const { authorization } = req.headers;\n\n  let userId;\n\n  try {\n    const { id } = await AuthService.verify(authorization);\n\n    userId = id;\n  } catch (error) {\n    return res.status(401).end();\n  }\n\n  DatabaseService.connect();\n\n  const user = await User.findOne({ _id: userId }, { name: -1 }, {email: -1});\n\n  res.json(user.toObject());\n};"]},"metadata":{},"sourceType":"module"}