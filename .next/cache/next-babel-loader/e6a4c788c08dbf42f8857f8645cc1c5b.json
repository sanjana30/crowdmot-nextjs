{"ast":null,"code":"import i18next from 'i18next';\nimport languageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nconst getI18nextInstance = ({\n  ns = 'translation',\n  resources\n}) => {\n  const newInstance = i18next.createInstance();\n  newInstance.use(languageDetector).use(initReactI18next).init({\n    fallbackLng: 'en',\n    ns,\n    resources,\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false\n    }\n  });\n  return newInstance;\n};\n/*\nconst setI18n = ({ lng = 'en', ns = 'translation', resources }) => {\n\tif (i18n.isInitialized) {\n\t\ti18n.addResourceBundle(lng, ns, resources, true, true);\n\t\tconsole.log(1)\n\t\tconsole.log(ns)\n\t} else {\n\t\ti18n\n\t\t\t.use(languageDetector)\n\t\t\t.use(initReactI18next)\n\t\t\t.init({\n\t\t\t\tfallbackLng: 'en',\n\t\t\t\tns: ns,\n\t\t\t\tresources,\n\t\t\t\tkeySeparator: false,\n\t\t\t\tinterpolation: {\n\t\t\t\t\tescapeValue: false,\n\t\t\t\t},\n\t\t\t});\n\t}\n\tconsole.log(i18n.hasResourceBundle(lng, ns))\n\treturn i18n;\n};\n*/\n\n\nexport { getI18nextInstance };","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/components/shared/utils/i18nextUtils.js"],"names":["i18next","languageDetector","initReactI18next","getI18nextInstance","ns","resources","newInstance","createInstance","use","init","fallbackLng","keySeparator","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,EAAE,GAAG,aAAP;AAAsBC,EAAAA;AAAtB,CAAD,KAAuC;AACjE,QAAMC,WAAW,GAAGN,OAAO,CAACO,cAAR,EAApB;AACAD,EAAAA,WAAW,CACTE,GADF,CACMP,gBADN,EAEEO,GAFF,CAEMN,gBAFN,EAGEO,IAHF,CAGO;AACLC,IAAAA,WAAW,EAAE,IADR;AAELN,IAAAA,EAFK;AAGLC,IAAAA,SAHK;AAILM,IAAAA,YAAY,EAAE,KAJT;AAKLC,IAAAA,aAAa,EAAE;AACdC,MAAAA,WAAW,EAAE;AADC;AALV,GAHP;AAYA,SAAOP,WAAP;AACA,CAfD;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SACCH,kBADD","sourcesContent":["import i18next from 'i18next';\nimport languageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nconst getI18nextInstance = ({ ns = 'translation', resources }) => {\n\tconst newInstance = i18next.createInstance();\n\tnewInstance\n\t\t.use(languageDetector)\n\t\t.use(initReactI18next)\n\t\t.init({\n\t\t\tfallbackLng: 'en',\n\t\t\tns,\n\t\t\tresources,\n\t\t\tkeySeparator: false,\n\t\t\tinterpolation: {\n\t\t\t\tescapeValue: false,\n\t\t\t},\n\t\t});\n\treturn newInstance;\n};\n\n/*\nconst setI18n = ({ lng = 'en', ns = 'translation', resources }) => {\n\tif (i18n.isInitialized) {\n\t\ti18n.addResourceBundle(lng, ns, resources, true, true);\n\t\tconsole.log(1)\n\t\tconsole.log(ns)\n\t} else {\n\t\ti18n\n\t\t\t.use(languageDetector)\n\t\t\t.use(initReactI18next)\n\t\t\t.init({\n\t\t\t\tfallbackLng: 'en',\n\t\t\t\tns: ns,\n\t\t\t\tresources,\n\t\t\t\tkeySeparator: false,\n\t\t\t\tinterpolation: {\n\t\t\t\t\tescapeValue: false,\n\t\t\t\t},\n\t\t\t});\n\t}\n\tconsole.log(i18n.hasResourceBundle(lng, ns))\n\treturn i18n;\n};\n*/\nexport {\n\tgetI18nextInstance,\n};\n"]},"metadata":{},"sourceType":"module"}