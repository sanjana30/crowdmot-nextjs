{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport jwt from \"jsonwebtoken\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookies from \"cookies\";\nimport DatabaseService from \"./database\";\nimport User from \"../models/User\";\n\nfunction createUser(pwd) {\n  var request, _await$request$json, id;\n\n  return _regeneratorRuntime.async(function createUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://paassword.now.sh/api/create\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              pwd: pwd\n            })\n          }));\n\n        case 2:\n          request = _context.sent;\n\n          if (!request.ok) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(request.json());\n\n        case 6:\n          _await$request$json = _context.sent;\n          id = _await$request$json.id;\n          return _context.abrupt(\"return\", id);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction validatePassword(passwordId, pwd) {\n  var request, _await$request$json2, valid;\n\n  return _regeneratorRuntime.async(function validatePassword$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"https://paassword.now.sh/api/get/\".concat(passwordId), {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              pwd: pwd\n            })\n          }));\n\n        case 2:\n          request = _context2.sent;\n\n          if (!request.ok) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(request.json());\n\n        case 6:\n          _await$request$json2 = _context2.sent;\n          valid = _await$request$json2.valid;\n          return _context2.abrupt(\"return\", valid);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n} // Sign our JWT / encrypting\n\n\nfunction sign(payload) {\n  return new Promise(function (resolve, reject) {\n    jwt.sign(payload, process.env.SECRET || \"secret\", {\n      expiresIn: \"1d\"\n    }, function (err, token) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(token);\n    });\n  });\n} // Veriy\n\n\nfunction verify(token) {\n  return new Promise(function (resolve, reject) {\n    jwt.verify(token, process.env.SECRET || \"secret\", function (err, payload) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(payload);\n    });\n  });\n}\n\nfunction getUserFromCookie(req) {\n  var cookies, payload, user;\n  return _regeneratorRuntime.async(function getUserFromCookie$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          cookies = new Cookies(req);\n          _context3.prev = 1;\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(verify(cookies.get(\"_wsp\")));\n\n        case 4:\n          payload = _context3.sent;\n          _context3.next = 10;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](1);\n          return _context3.abrupt(\"return\", null);\n\n        case 10:\n          DatabaseService.connect();\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(User.findOne({\n            _id: payload.id\n          }, {\n            name: -1\n          }));\n\n        case 13:\n          user = _context3.sent;\n          return _context3.abrupt(\"return\", JSON.parse(JSON.stringify(user)));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n}\n\nexport default {\n  createUser: createUser,\n  validatePassword: validatePassword,\n  sign: sign,\n  verify: verify,\n  getUserFromCookie: getUserFromCookie\n};","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/services/auth.js"],"names":["jwt","fetch","Cookies","DatabaseService","User","createUser","pwd","method","headers","body","JSON","stringify","request","ok","json","id","validatePassword","passwordId","valid","sign","payload","Promise","resolve","reject","process","env","SECRET","expiresIn","err","token","verify","getUserFromCookie","req","cookies","get","connect","findOne","_id","name","user","parse"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookies from \"cookies\";\nimport DatabaseService from \"./database\";\nimport User from \"../models/User\";\n\nasync function createUser(pwd) {\n  const request = await fetch(\"https://paassword.now.sh/api/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ pwd }),\n  });\n\n  if (request.ok) {\n    const { id } = await request.json();\n\n    return id;\n  }\n}\n\nasync function validatePassword(passwordId, pwd) {\n  const request = await fetch(\n    `https://paassword.now.sh/api/get/${passwordId}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ pwd }),\n    }\n  );\n\n  if (request.ok) {\n    const { valid } = await request.json();\n\n    return valid;\n  }\n}\n\n// Sign our JWT / encrypting\nfunction sign(payload) {\n  return new Promise((resolve, reject) => {\n    jwt.sign(\n      payload,\n      process.env.SECRET || \"secret\",\n      {\n        expiresIn: \"1d\",\n      },\n      (err, token) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(token);\n      }\n    );\n  });\n}\n\n// Veriy\nfunction verify(token) {\n  return new Promise((resolve, reject) => {\n    jwt.verify(token, process.env.SECRET || \"secret\", (err, payload) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(payload);\n    });\n  });\n}\n\nasync function getUserFromCookie(req) {\n  const cookies = new Cookies(req);\n\n  let payload;\n\n  try {\n    payload = await verify(cookies.get(\"_wsp\"));\n  } catch (error) {\n    return null;\n  }\n\n  DatabaseService.connect();\n\n  const user = await User.findOne({ _id: payload.id }, { name: -1 });\n\n  return JSON.parse(JSON.stringify(user));\n}\n\nexport default {\n  createUser,\n  validatePassword,\n  sign,\n  verify,\n  getUserFromCookie,\n};"]},"metadata":{},"sourceType":"module"}