{"ast":null,"code":"\"use strict\";\n/**\n * This is a modified version of the First Input Delay polyfill\n * https://github.com/GoogleChromeLabs/first-input-delay\n *\n * It checks for a first input before and after hydration\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction fidPolyfill(addEventListener, removeEventListener) {\n  var firstInputEvent;\n  var firstInputDelay;\n  var firstInputTimeStamp;\n  var callbacks = [];\n  var listenerOpts = {\n    passive: true,\n    capture: true\n  };\n  var startTimeStamp = +new Date();\n  var pointerup = 'pointerup';\n  var pointercancel = 'pointercancel';\n\n  function onInputDelay(callback) {\n    callbacks.push(callback);\n    reportInputDelayIfRecordedAndValid();\n  }\n\n  function recordInputDelay(delay, evt) {\n    firstInputEvent = evt;\n    firstInputDelay = delay;\n    firstInputTimeStamp = +new Date();\n    reportInputDelayIfRecordedAndValid();\n  }\n\n  function reportInputDelayIfRecordedAndValid() {\n    var hydrationMeasures = performance.getEntriesByName('Next.js-hydration', 'measure');\n    var firstInputStart = firstInputTimeStamp - startTimeStamp;\n\n    if (firstInputDelay >= 0 && firstInputDelay < firstInputStart && (hydrationMeasures.length === 0 || hydrationMeasures[0].startTime < firstInputStart)) {\n      callbacks.forEach(function (callback) {\n        callback(firstInputDelay, firstInputEvent);\n      }); // If the app is already hydrated, that means the first \"post-hydration\" input\n      // has been measured and listeners can be removed\n\n      if (hydrationMeasures.length > 0) {\n        eachEventType(removeEventListener);\n        callbacks = [];\n      }\n    }\n  }\n\n  function onPointerDown(delay, evt) {\n    function onPointerUp() {\n      recordInputDelay(delay, evt);\n    }\n\n    function onPointerCancel() {\n      removePointerEventListeners();\n    }\n\n    function removePointerEventListeners() {\n      removeEventListener(pointerup, onPointerUp, listenerOpts);\n      removeEventListener(pointercancel, onPointerCancel, listenerOpts);\n    }\n\n    addEventListener(pointerup, onPointerUp, listenerOpts);\n    addEventListener(pointercancel, onPointerCancel, listenerOpts);\n  }\n\n  function onInput(evt) {\n    if (evt.cancelable) {\n      var isEpochTime = evt.timeStamp > 1e12;\n      var now = isEpochTime ? +new Date() : performance.now();\n      var delay = now - evt.timeStamp;\n\n      if (evt.type === 'pointerdown') {\n        onPointerDown(delay, evt);\n      } else {\n        recordInputDelay(delay, evt);\n      }\n    }\n  }\n\n  function eachEventType(callback) {\n    var eventTypes = ['click', 'mousedown', 'keydown', 'touchstart', 'pointerdown'];\n    eventTypes.forEach(function (eventType) {\n      callback(eventType, onInput, listenerOpts);\n    });\n  }\n\n  eachEventType(addEventListener);\n  var context = self;\n  context['hydrationMetrics'] = context['hydrationMetrics'] || {};\n  context['hydrationMetrics']['onInputDelay'] = onInputDelay;\n}\n\nexports.default = fidPolyfill;","map":null,"metadata":{},"sourceType":"script"}