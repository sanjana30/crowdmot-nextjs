{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useReducer, useContext } from 'react';\nimport { ListGroup } from 'reactstrap';\nimport { Events, scrollSpy, scroller } from 'react-scroll';\nimport { initialIsDialogDisabledState, isDialogDisabledReducer } from './isDialogDisabledReducer';\nimport AnnotationItem from './AnnotationItem/AnnotationItem.jsx';\nimport TwoDimensionalVideoContext from '../TwoDimensionalVideo/twoDimensionalVideoContext';\nimport { getSortedAnnotationsByLabel } from '../../utils/utils';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './annotationList.scss';\n\nvar AnnotationList = function AnnotationList(_ref) {\n  var className = _ref.className;\n\n  var _useReducer = useReducer(isDialogDisabledReducer, initialIsDialogDisabledState),\n      isDialogDisabled = _useReducer[0],\n      dispatchIsDialogDisabled = _useReducer[1];\n\n  var twoDimensionalVideoContext = useContext(TwoDimensionalVideoContext);\n  var entities = twoDimensionalVideoContext.entities,\n      focusing = twoDimensionalVideoContext.focusing,\n      annotations = twoDimensionalVideoContext.annotations,\n      height = twoDimensionalVideoContext.height,\n      emptyAnnotationReminderText = twoDimensionalVideoContext.emptyAnnotationReminderText;\n  useEffect(function () {\n    Events.scrollEvent.register('begin', function () {});\n    Events.scrollEvent.register('end', function () {});\n    scrollSpy.update();\n    return function () {\n      Events.scrollEvent.remove('begin');\n      Events.scrollEvent.remove('end');\n    };\n  }, []);\n  useEffect(function () {\n    if (focusing) {\n      scroller.scrollTo(focusing, {\n        containerId: 'annotation-list'\n      });\n    }\n  }, [focusing]);\n  var sortedAnnotations = getSortedAnnotationsByLabel(annotations, entities);\n  var itemsUI = sortedAnnotations.filter(function (ann) {\n    return entities && entities.annotations[ann] && entities.annotations[ann].isManipulatable;\n  }).map(function (ann) {\n    return __jsx(AnnotationItem, {\n      key: ann,\n      itemData: entities.annotations[ann],\n      isDialogDisabled: isDialogDisabled,\n      dispatchIsDialogDisabled: dispatchIsDialogDisabled\n    });\n  });\n\n  if (itemsUI.length === 0) {\n    return __jsx(\"div\", {\n      className: \"d-flex align-items-center justify-content-center\",\n      style: {\n        height: height - 60\n      }\n    }, emptyAnnotationReminderText);\n  }\n\n  var rootClassName = \"annotation-list\".concat(className ? \" \".concat(className) : '');\n  return __jsx(ListGroup, {\n    className: rootClassName,\n    id: \"annotation-list\",\n    style: {\n      maxHeight: height - 60\n    }\n  }, itemsUI);\n};\n\nAnnotationList.defaultProps = {\n  className: ''\n};\nexport default AnnotationList;","map":null,"metadata":{},"sourceType":"module"}