{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { I18nextProvider, Translation } from 'react-i18next';\nimport { normalize, denormalize, schema } from 'normalizr';\nimport { Button, ButtonGroup } from 'reactstrap';\nimport { MdRedo, MdUndo, MdAdd } from 'react-icons/md';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport PopupDialog from 'shared/components/PopupDialog/PopupDialog.jsx';\nimport { highContrastingColors as colors } from 'shared/utils/colorUtils';\nimport { getRandomInt, getFixedNumber } from 'shared/utils/mathUtils';\nimport { UndoRedo } from '/Applications/CrowdMOT/crowdmot-nextjs/components/models/UndoRedo.js';\nimport i18nextInstance from './i18n';\nimport { Rectangle } from '../../models/rectangle';\nimport { Incident, SPLIT, HIDE, SHOW } from '../../models/incident';\nimport TwoDimensionalVideoContext from './twoDimensionalVideoContext';\nimport { getInterpolatedData, INTERPOLATION_TYPE } from '../../utils/interpolationUtils';\nimport Preview from '../Preview/Preview.jsx';\nimport Review from '../Review/Review.jsx';\nimport AnnotationList from '../AnnotationList/AnnotationList.jsx';\nimport DrawableVideoPlayer from '../DrawableVideoPlayer/DrawableVideoPlayer.jsx';\nimport { getLastAnnotationLabel, getUniqueKey } from '../../utils/utils';\nimport './twoDimensionalVideo.scss';\n\nvar randomColor = require('randomcolor');\n\nvar TwoDimensionalVideo = /*#__PURE__*/function (_Component) {\n  _inherits(TwoDimensionalVideo, _Component);\n\n  var _super = _createSuper(TwoDimensionalVideo);\n\n  function TwoDimensionalVideo(props) {\n    var _this;\n\n    _classCallCheck(this, TwoDimensionalVideo);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"buttonStyles\", {\n      marginLeft: 5\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlayerRef\", function (player) {\n      _this.player = player;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoReady\", function () {\n      _this.setState({\n        annotationHeight: document.getElementById('react-player').children[0].clientHeight\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoProgress\", function (state) {\n      var played = state.played;\n\n      _this.setState(function (prevState) {\n        if (prevState.isSeeking) return null;\n        return {\n          played: getFixedNumber(played, 5)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoDuration\", function (duration) {\n      _this.setState({\n        duration: duration\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoEnded\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isPlaying: prevState.isLoop\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoRewind\", function () {\n      _this.setState({\n        isPlaying: false,\n        played: 0\n      });\n\n      _this.player.seekTo(0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoPlayPause\", function () {\n      _this.setState(function (prevState) {\n        return {\n          isPlaying: !prevState.isPlaying\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoSpeedChange\", function (s) {\n      _this.setState({\n        playbackRate: s\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoSliderMouseUp\", function () {\n      _this.setState({\n        isSeeking: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoSliderMouseDown\", function () {\n      _this.setState({\n        isPlaying: false,\n        isSeeking: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleVideoSliderChange\", function (e) {\n      var played = getFixedNumber(e.target.value, 5);\n\n      _this.setState(function (prevState) {\n        var entities = prevState.entities;\n        var focusing = prevState.focusing;\n\n        if (focusing) {\n          var incidents = entities.annotations[focusing].incidents;\n\n          for (var i = 0; i < incidents.length; i += 1) {\n            if (played >= incidents[i].time) {\n              if (i !== incidents.length - 1 && played >= incidents[i + 1].time) continue;\n              if (incidents[i].status !== SHOW) focusing = '';\n              break;\n            } else if (i === incidents.length - 1) focusing = '';\n          }\n        }\n\n        return {\n          played: played,\n          focusing: focusing\n        };\n      }, function () {\n        _this.player.seekTo(played);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCanvasStageMouseDown\", function (e) {\n      var isAdding = _this.state.isAdding;\n      if (!isAdding) return;\n      var stage = e.target.getStage();\n      var position = stage.getPointerPosition();\n      var uniqueKey = getUniqueKey();\n      var color = colors[getRandomInt(colors.length)]; // const color = randomColor({\n      // \tluminosity: 'light',\n      // \tformat: 'rgba' // e.g. 'rgba(9, 1, 107, 0.6482447960879654)'\n      // });\n\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(_objectSpread({}, prevState, {\n          isAdding: false\n        })); // Undo/Redo\n\n\n        var annotations = prevState.annotations,\n            entities = prevState.entities;\n        var incidents = [];\n        incidents.push(Incident({\n          id: \"\".concat(uniqueKey),\n          name: \"\".concat(uniqueKey),\n          x: position.x,\n          y: position.y,\n          height: 1,\n          width: 1,\n          time: prevState.played\n        }));\n        entities.annotations[\"\".concat(uniqueKey)] = Rectangle({\n          id: \"\".concat(uniqueKey),\n          name: \"\".concat(uniqueKey),\n          label: \"\".concat(getLastAnnotationLabel(annotations, entities) + 1),\n          color: color,\n          incidents: incidents\n        });\n        return {\n          isAdding: false,\n          focusing: \"\".concat(uniqueKey),\n          annotations: [].concat(_toConsumableArray(annotations), [\"\".concat(uniqueKey)]),\n          entities: _objectSpread({}, entities, {\n            annotations: entities.annotations\n          })\n        };\n      }, function () {\n        var group = stage.find(\".\".concat(uniqueKey))[0];\n        var bottomRight = group.get('.bottomRight')[0];\n        group.moveToTop();\n        bottomRight.moveToTop();\n        bottomRight.startDrag();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCanvasGroupMouseDown\", function (e) {\n      var group = e.target.findAncestor('Group');\n\n      _this.setState({\n        isPlaying: false,\n        focusing: group.name()\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCanvasGroupDragEnd\", function (e) {\n      if (e.target.getClassName() !== 'Group') return;\n      var group = e.target;\n      var rect = group.get('Rect')[0];\n      var position = group.position();\n      var uniqueKey = getUniqueKey();\n\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(prevState);\n\n        var entities = prevState.entities,\n            played = prevState.played;\n        var incidents = entities.annotations[group.name()].incidents;\n\n        for (var i = 0; i < incidents.length; i += 1) {\n          if (played >= incidents[i].time) {\n            // skip elapsed incidents\n            if (i !== incidents.length - 1 && played >= incidents[i + 1].time) continue;\n\n            if (played === incidents[i].time) {\n              incidents[i].x = position.x;\n              incidents[i].y = position.y;\n              incidents[i].width = rect.width();\n              incidents[i].height = rect.height();\n              break;\n            }\n\n            if (i === incidents.length - 1) {\n              incidents.push(Incident({\n                id: \"\".concat(uniqueKey),\n                name: \"\".concat(uniqueKey),\n                x: position.x,\n                y: position.y,\n                width: rect.width(),\n                height: rect.height(),\n                time: played\n              }));\n              break;\n            }\n\n            incidents.splice(i + 1, 0, Incident({\n              id: \"\".concat(uniqueKey),\n              name: \"\".concat(uniqueKey),\n              x: position.x,\n              y: position.y,\n              height: rect.height(),\n              width: rect.width(),\n              time: played\n            }));\n            break;\n          }\n        }\n\n        return {};\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCanvasDotMouseDown\", function (e) {\n      var group = e.target.findAncestor('Group');\n\n      _this.setState({\n        focusing: group.name()\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCanvasDotDragEnd\", function (e) {\n      var activeAnchor = e.target;\n      var group = activeAnchor.getParent();\n      var uniqueKey = getUniqueKey();\n      group.draggable(true);\n      var topLeft = group.get('.topLeft')[0];\n      var topRight = group.get('.topRight')[0];\n      var bottomRight = group.get('.bottomRight')[0];\n      var bottomLeft = group.get('.bottomLeft')[0];\n      var maxX = Math.max(topLeft.getAbsolutePosition().x, topRight.getAbsolutePosition().x, bottomRight.getAbsolutePosition().x, bottomLeft.getAbsolutePosition().x);\n      var minX = Math.min(topLeft.getAbsolutePosition().x, topRight.getAbsolutePosition().x, bottomRight.getAbsolutePosition().x, bottomLeft.getAbsolutePosition().x);\n      var maxY = Math.max(topLeft.getAbsolutePosition().y, topRight.getAbsolutePosition().y, bottomRight.getAbsolutePosition().y, bottomLeft.getAbsolutePosition().y);\n      var minY = Math.min(topLeft.getAbsolutePosition().y, topRight.getAbsolutePosition().y, bottomRight.getAbsolutePosition().y, bottomLeft.getAbsolutePosition().y);\n\n      _this.setState(function (prevState, props) {\n        _this.UndoRedoState.save(prevState);\n\n        var entities = prevState.entities,\n            played = prevState.played;\n        var annotations = entities.annotations;\n        var incidents = entities.annotations[group.name()].incidents;\n\n        for (var i = 0; i < incidents.length; i += 1) {\n          if (played >= incidents[i].time) {\n            // skip elapsed incidents\n            if (i !== incidents.length - 1 && played >= incidents[i + 1].time) continue;\n\n            if (played === incidents[i].time) {\n              incidents[i].x = minX;\n              incidents[i].y = minY;\n              incidents[i].height = maxY - minY;\n              incidents[i].width = maxX - minX;\n              break;\n            }\n\n            incidents.splice(i + 1, 0, Incident({\n              id: \"\".concat(uniqueKey),\n              name: \"\".concat(uniqueKey),\n              x: minX,\n              y: minY,\n              height: maxY - minY,\n              width: maxX - minX,\n              time: played\n            }));\n            break;\n          }\n        }\n\n        annotations[group.name()].incidents = incidents;\n        return {\n          entities: _objectSpread({}, entities, {\n            annotations: annotations\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAnnotationItemClick\", function (name) {\n      return _this.setState({\n        focusing: name\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIncidentItemClick\", function (incident) {\n      var annotationName = incident.annotationName,\n          time = incident.time;\n\n      _this.setState({\n        isPlaying: false,\n        focusing: annotationName\n      }, function () {\n        _this.player.seekTo(parseFloat(time));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleIncidentItemDelete\", function (e) {\n      var annotationName = e.annotationName,\n          incidentName = e.incidentName;\n\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(prevState);\n\n        var entities = prevState.entities;\n        var annotations = entities.annotations;\n        var incidents = entities.annotations[annotationName].incidents.filter(function (t) {\n          if (t.name !== incidentName) return true;\n          return false;\n        });\n        annotations[annotationName].incidents = incidents;\n        return {\n          entities: _objectSpread({}, entities, {\n            annotations: annotations\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleListAnnotationDelete\", function (name) {\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(prevState);\n\n        var entities = prevState.entities,\n            annotations = prevState.annotations;\n        var entitiesAnnotations = entities.annotations;\n        var label = entitiesAnnotations[name].label; // reorder the list\n\n        if (!isNaN(label)) {\n          var lastLabel = getLastAnnotationLabel(annotations, entities);\n\n          if (\"\".concat(lastLabel) !== '1' && \"\".concat(lastLabel) !== label) {\n            var lastName = annotations.find(function (a) {\n              return entitiesAnnotations[a].label === \"\".concat(lastLabel);\n            });\n\n            _this.renameLabel(annotations, entitiesAnnotations, lastName, label);\n          }\n        } // remove name from the parent's childrenNames\n\n\n        if (entitiesAnnotations[name].parentName) {\n          var parent = entitiesAnnotations[entitiesAnnotations[name].parentName];\n          var i = parent.childrenNames.indexOf(name);\n\n          if (i !== -1) {\n            parent.childrenNames.splice(i, 1);\n            if (parent.childrenNames.length == 0 && parent.incidents[parent.incidents.length - 1].status === SPLIT) parent.incidents[parent.incidents.length - 1].status = SHOW;\n          }\n        } // remove all its children and itself recusively\n\n\n        _this.removeAnnotation(annotations, entitiesAnnotations, name);\n\n        return {\n          annotations: annotations,\n          entities: _objectSpread({}, entities, {\n            annotations: entitiesAnnotations\n          }),\n          focusing: ''\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeAnnotation\", function (annotations, entitiesAnnotations, name) {\n      if (entitiesAnnotations[name].childrenNames.length !== 0) {\n        entitiesAnnotations[name].childrenNames.forEach(function (c) {\n          _this.removeAnnotation(annotations, entitiesAnnotations, c);\n        });\n      }\n\n      delete entitiesAnnotations.name;\n      var i = annotations.indexOf(name);\n      annotations.splice(i, 1);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renameLabel\", function (annotations, entitiesAnnotations, name, label) {\n      if (entitiesAnnotations[name].childrenNames.length !== 0) {\n        entitiesAnnotations[name].childrenNames.forEach(function (c, index) {\n          _this.renameLabel(annotations, entitiesAnnotations, c, \"\".concat(label, \"-\").concat(index + 1));\n        });\n      }\n\n      entitiesAnnotations[name].label = label;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleListAnnotationShowHide\", function (e) {\n      console.log(e);\n      var name = e.name;\n      var status = e.status;\n      var uniqueKey = new Date().getTime().toString(36);\n\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(prevState);\n\n        var played = prevState.played,\n            entities = prevState.entities;\n        var incidents = entities.annotations[name].incidents;\n\n        for (var i = 0; i < incidents.length; i += 1) {\n          if (i === 0 && played < incidents[i].time) {\n            incidents.splice(0, 0, Incident({\n              id: \"\".concat(uniqueKey),\n              name: \"\".concat(uniqueKey),\n              x: incidents[i].x,\n              y: incidents[i].y,\n              height: incidents[i].height,\n              width: incidents[i].width,\n              time: played,\n              status: status\n            }));\n            break;\n          }\n\n          if (played >= incidents[i].time) {\n            // skip elapsed incidents\n            if (i !== incidents.length - 1 && played >= incidents[i + 1].time) continue;\n\n            if (played === incidents[i].time) {\n              incidents.splice(i, 1, Incident(_objectSpread({}, incidents[i], {\n                id: \"\".concat(uniqueKey),\n                name: \"\".concat(uniqueKey),\n                status: status\n              })));\n              break;\n            }\n\n            if (i === incidents.length - 1) {\n              incidents.push(Incident({\n                id: \"\".concat(uniqueKey),\n                name: \"\".concat(uniqueKey),\n                x: incidents[i].x,\n                y: incidents[i].y,\n                height: incidents[i].height,\n                width: incidents[i].width,\n                time: played,\n                status: status\n              }));\n              break;\n            }\n\n            var interpoArea = getInterpolatedData({\n              startIncident: incidents[i],\n              endIncident: incidents[i + 1],\n              currentTime: played,\n              type: INTERPOLATION_TYPE.LENGTH\n            });\n            var interpoPos = getInterpolatedData({\n              startIncident: incidents[i],\n              endIncident: incidents[i + 1],\n              currentTime: played,\n              type: INTERPOLATION_TYPE.POSITION\n            });\n            incidents.splice(i + 1, 0, Incident({\n              id: \"\".concat(uniqueKey),\n              name: \"\".concat(uniqueKey),\n              x: interpoPos.x,\n              y: interpoPos.y,\n              height: interpoArea.height,\n              width: interpoArea.width,\n              time: played,\n              status: status\n            }));\n            break;\n          }\n        }\n\n        if (status === HIDE) entities.annotations[name].clearRedundantIncidents(status);\n        return {\n          entities: _objectSpread({}, entities, {\n            annotations: entities.annotations\n          })\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleListAnnotationSplit\", function (name) {\n      var timeNow = new Date().getTime().toString(36);\n      var timeNowChild1 = (new Date().getTime() + 1).toString(36);\n      var timeNowChild2 = (new Date().getTime() + 2).toString(36);\n      var status = SPLIT;\n\n      _this.setState(function (prevState) {\n        _this.UndoRedoState.save(prevState);\n\n        var played = prevState.played,\n            entities = prevState.entities,\n            annotations = prevState.annotations;\n        var parent = entities.annotations[name]; // remove ex-childrenNames\n\n        if (parent.childrenNames.length !== 0) {\n          var _iterator = _createForOfIteratorHelper(parent.childrenNames),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var c = _step.value;\n              delete entities.annotations[c];\n              var i = annotations.indexOf(c);\n              annotations.splice(i, 1);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } // make sure parent's color is different from its children\n\n\n        var randomColor = colors[getRandomInt(colors.length)];\n\n        while (parent.color === randomColor) {\n          randomColor = colors[getRandomInt(colors.length)];\n        }\n\n        var childrenColor = randomColor; // const childrenColor = randomColor({\n        // \tluminosity: 'light',\n        // \tformat: 'rgba' // e.g. 'rgba(9, 1, 107, 0.6482447960879654)'\n        // });\n\n        var parentX;\n        var parentY;\n        var parentWidth;\n        var parentHeight;\n        var incidents = parent.incidents;\n\n        for (var _i = 0; _i < incidents.length; _i++) {\n          if (played >= incidents[_i].time) {\n            if (_i !== incidents.length - 1 && played >= incidents[_i + 1].time) continue;\n            parentX = incidents[_i].x;\n            parentY = incidents[_i].y;\n            parentWidth = incidents[_i].width;\n            parentHeight = incidents[_i].height;\n\n            if (played === incidents[_i].time) {\n              incidents.splice(_i, 1, Incident(_objectSpread({}, incidents[_i], {\n                id: \"\".concat(timeNow),\n                name: \"\".concat(timeNow),\n                status: status\n              })));\n              incidents = incidents.slice(0, _i + 1);\n              break;\n            }\n\n            if (_i === incidents.length - 1) {\n              incidents.push(Incident({\n                id: \"\".concat(timeNow),\n                name: \"\".concat(timeNow),\n                x: incidents[_i].x,\n                y: incidents[_i].y,\n                height: incidents[_i].height,\n                width: incidents[_i].width,\n                time: played,\n                status: status\n              }));\n              break;\n            }\n\n            var interpoArea = getInterpolatedData({\n              startIncident: incidents[_i],\n              endIncident: incidents[_i + 1],\n              currentTime: played,\n              type: INTERPOLATION_TYPE.LENGTH\n            });\n            var interpoPos = getInterpolatedData({\n              startIncident: incidents[_i],\n              endIncident: incidents[_i + 1],\n              currentTime: played,\n              type: INTERPOLATION_TYPE.POSITION\n            });\n            parentX = interpoPos.x;\n            parentY = interpoPos.y;\n            parentWidth = interpoArea.width;\n            parentHeight = interpoArea.height;\n            incidents.splice(_i + 1, 0, Incident({\n              id: \"\".concat(timeNow),\n              name: \"\".concat(timeNow),\n              x: interpoPos.x,\n              y: interpoPos.y,\n              height: interpoArea.height,\n              width: interpoArea.width,\n              time: played,\n              status: status\n            }));\n            incidents = incidents.slice(0, _i + 2);\n            break;\n          }\n        }\n\n        parent.childrenNames = [\"\".concat(timeNowChild1), \"\".concat(timeNowChild2)];\n        parent.incidents = incidents;\n        var childIncidents1 = [Incident({\n          id: \"\".concat(timeNow),\n          name: \"\".concat(timeNow),\n          x: parentX,\n          y: parentY,\n          height: parentHeight / 2,\n          width: parentWidth / 2,\n          time: played\n        })];\n        var childIncidents2 = [Incident({\n          id: \"\".concat(timeNow),\n          name: \"\".concat(timeNow),\n          x: parentX + parentWidth / 2 - 20,\n          y: parentY + parentHeight / 2 - 20,\n          height: parentHeight / 2,\n          width: parentWidth / 2,\n          time: played\n        })];\n        entities.annotations[\"\".concat(timeNowChild1)] = Rectangle({\n          id: \"\".concat(timeNowChild1),\n          name: \"\".concat(timeNowChild1),\n          label: \"\".concat(parent.label, \"-1\"),\n          color: childrenColor,\n          incidents: childIncidents1,\n          parentName: parent.name\n        });\n        entities.annotations[\"\".concat(timeNowChild2)] = Rectangle({\n          id: \"\".concat(timeNowChild2),\n          name: \"\".concat(timeNowChild2),\n          label: \"\".concat(parent.label, \"-2\"),\n          color: childrenColor,\n          incidents: childIncidents2,\n          parentName: parent.name\n        });\n        var parentIndex = annotations.find(function (a) {\n          return a === parent.name;\n        });\n        annotations.splice(parentIndex, 0, \"\".concat(timeNowChild1));\n        annotations.splice(parentIndex, 0, \"\".concat(timeNowChild2));\n        return {\n          annotations: annotations,\n          entities: entities,\n          focusing: \"\".concat(timeNowChild2)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleUndo\", function () {\n      if (_this.UndoRedoState.previous.length === 0) return;\n\n      _this.setState(function (prevState) {\n        var state = _this.UndoRedoState.undo(prevState);\n\n        return _objectSpread({}, state);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleRedo\", function () {\n      if (_this.UndoRedoState.next.length === 0) return;\n\n      _this.setState(function (prevState) {\n        var state = _this.UndoRedoState.redo(prevState);\n\n        return _objectSpread({}, state);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePreviewClick\", function () {\n      return _this.setState({\n        isPreviewed: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleReviewCancelSubmission\", function () {\n      return _this.setState({\n        isLoop: false,\n        isSubmitted: false,\n        isPlaying: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isEmptyAnnotationOrIncident\", function () {\n      var _this$state = _this.state,\n          annotations = _this$state.annotations,\n          defaultNumAnnotations = _this$state.defaultNumAnnotations,\n          entities = _this$state.entities;\n      var isEmptyCheckEnable = _this.props.isEmptyCheckEnable;\n      if (!isEmptyCheckEnable) return false;\n\n      if (annotations.length !== 0 && defaultNumAnnotations < annotations.length) {\n        var _iterator2 = _createForOfIteratorHelper(annotations),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var ann = _step2.value;\n            if (entities.annotations[ann].incidents.length < 2) return true;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return false;\n      }\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function () {\n      var _this$state2 = _this.state,\n          annotations = _this$state2.annotations,\n          isSubmitted = _this$state2.isSubmitted;\n      var _this$props = _this.props,\n          onSubmit = _this$props.onSubmit,\n          hasReview = _this$props.hasReview,\n          emptyCheckSubmissionWarningText = _this$props.emptyCheckSubmissionWarningText;\n\n      if (_this.isEmptyAnnotationOrIncident()) {\n        _this.setState({\n          isDialogOpen: true,\n          dialogTitle: 'Submission warning',\n          dialogMessage: emptyCheckSubmissionWarningText\n        });\n\n        return;\n      }\n\n      if (!isSubmitted && hasReview) {\n        _this.setState({\n          isLoop: true,\n          isSubmitted: true,\n          played: 0,\n          isPlaying: true,\n          focusing: ''\n        });\n\n        return;\n      }\n\n      var _this$state3 = _this.state,\n          videoWidth = _this$state3.videoWidth,\n          annotationHeight = _this$state3.annotationHeight,\n          entities = _this$state3.entities,\n          duration = _this$state3.duration;\n      var url = _this.props.url;\n      var annotation = new schema.Entity('annotations');\n      var denormalizedAnnotations = denormalize({\n        annotations: annotations\n      }, {\n        annotations: [annotation]\n      }, entities).annotations;\n      denormalizedAnnotations.forEach(function (ann) {\n        delete ann.isManipulatable;\n      });\n      var data = {\n        url: url,\n        videoWidth: videoWidth,\n        annotationHeight: annotationHeight,\n        annotations: denormalizedAnnotations,\n        duration: duration\n      };\n      onSubmit(data);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDialogToggle\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          isDialogOpen: !prevState.isDialogOpen\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddClick\", function () {\n      return _this.setState(function (prevState) {\n        return {\n          isAdding: !prevState.isAdding,\n          isPlaying: false\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleShowCurrent\", function (e) {\n      console.log(_this.state);\n      var annot_length = _this.state.annotations.length; // console.log(this.state.annotations[annot_length-1]);\n\n      for (var j = 0; j < annot_length - 1; j++) {\n        var not_curr_box = _this.state.annotations[j];\n        var not_curr_box_name = _this.state.entities.annotations[not_curr_box];\n\n        for (var i = 0; i < not_curr_box_name.incidents.length; i++) {\n          not_curr_box_name.incidents[i].status = \"Hide\";\n          not_curr_box_name.incidents[i].displayCurrent = false;\n        }\n      } // let curr_box = this.state.annotations[annot_length-1]\n      // console.log(this.state.entities.annotations[curr_box]);\n      // let curr_box_name = this.state.entities.annotations[curr_box];\n      // for (var i=0; i< curr_box_name.incidents.length; i++){\n      // \tcurr_box_name.incidents[i].status = \"Hide\"; \n      // }\n      // console.log(curr_box_name.incidents)\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderAddButtonUI\", function () {\n      var _this$state4 = _this.state,\n          isAdding = _this$state4.isAdding,\n          defaultNumRootAnnotations = _this$state4.defaultNumRootAnnotations,\n          annotations = _this$state4.annotations,\n          entities = _this$state4.entities;\n      var numAnnotationsCanBeAdded = _this.props.numAnnotationsCanBeAdded;\n      var isAddButtonAvailable = defaultNumRootAnnotations + numAnnotationsCanBeAdded > getLastAnnotationLabel(annotations, entities);\n\n      if (isAdding || !isAdding && isAddButtonAvailable) {\n        return __jsx(Button, {\n          disabled: isAdding,\n          color: \"primary\",\n          onClick: _this.handleAddClick,\n          className: \"d-flex align-items-center float-left\"\n        }, __jsx(MdAdd, null), __jsx(Translation, {\n          ns: \"twoDimensionalVideo\"\n        }, function (t) {\n          return isAdding ? t('addingBox') : t('addBox');\n        }));\n      }\n\n      return null;\n    });\n\n    var defaultAnnotations = props.defaultAnnotations,\n        _videoWidth = props.videoWidth,\n        previewHeader = props.previewHeader,\n        previewNoticeList = props.previewNoticeList,\n        _duration = props.duration;\n    console.log(props);\n    console.log(\"Hello props\\n\" + JSON.stringify(props));\n    /* ===  normalize annotation props === */\n\n    var _entities = {\n      annotations: {}\n    };\n    var _annotations = [];\n\n    if (defaultAnnotations && defaultAnnotations.length !== 0) {\n      var annotation = new schema.Entity('annotations');\n      var normalizedAnn = normalize(defaultAnnotations, [annotation]);\n      _entities.annotations = normalizedAnn.entities.annotations;\n      _annotations = normalizedAnn.result;\n\n      _annotations.forEach(function (id) {\n        _entities.annotations[id].isManipulatable = props.isDefaultAnnotationsManipulatable;\n      });\n    }\n\n    _this.state = {\n      isPreviewed: previewNoticeList && previewNoticeList.length === 0 && !previewHeader,\n      isSubmitted: false,\n      videoWidth: _videoWidth,\n      annotationHeight: 200,\n      entities: _entities,\n      annotations: _annotations,\n      played: 0,\n      isPlaying: false,\n      playbackRate: 1,\n      duration: 0,\n      isLoop: false,\n      isSeeking: false,\n      isAdding: false,\n      focusing: '',\n      isDialogOpen: false,\n      dialogTitle: '',\n      dialogMessage: '',\n      defaultNumAnnotations: _annotations.length,\n      defaultNumRootAnnotations: getLastAnnotationLabel(_annotations, _entities)\n    };\n    _this.UndoRedoState = new UndoRedo();\n    return _this;\n  }\n  /* ==================== video player ==================== */\n\n\n  _createClass(TwoDimensionalVideo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state5 = this.state,\n          isPreviewed = _this$state5.isPreviewed,\n          isSubmitted = _this$state5.isSubmitted,\n          videoWidth = _this$state5.videoWidth,\n          annotationHeight = _this$state5.annotationHeight,\n          isPlaying = _this$state5.isPlaying,\n          played = _this$state5.played,\n          playbackRate = _this$state5.playbackRate,\n          duration = _this$state5.duration,\n          isLoop = _this$state5.isLoop,\n          isAdding = _this$state5.isAdding,\n          focusing = _this$state5.focusing,\n          entities = _this$state5.entities,\n          annotations = _this$state5.annotations,\n          isDialogOpen = _this$state5.isDialogOpen,\n          dialogTitle = _this$state5.dialogTitle,\n          dialogMessage = _this$state5.dialogMessage;\n      var _this$props2 = this.props,\n          className = _this$props2.className,\n          url = _this$props2.url,\n          previewHeader = _this$props2.previewHeader,\n          previewNoticeList = _this$props2.previewNoticeList,\n          isEmptyCheckEnable = _this$props2.isEmptyCheckEnable,\n          isSplitEnable = _this$props2.isSplitEnable,\n          isShowHideEnable = _this$props2.isShowHideEnable,\n          emptyCheckAnnotationItemWarningText = _this$props2.emptyCheckAnnotationItemWarningText,\n          emptyAnnotationReminderText = _this$props2.emptyAnnotationReminderText;\n      var twoDimensionalVideoContext = {\n        playerRef: this.handlePlayerRef,\n        entities: entities,\n        annotations: annotations,\n        duration: duration,\n        played: played,\n        focusing: focusing,\n        width: videoWidth,\n        height: annotationHeight,\n        isEmptyCheckEnable: isEmptyCheckEnable,\n        url: url,\n        isPlaying: isPlaying,\n        isLoop: isLoop,\n        playbackRate: playbackRate,\n        isAdding: isAdding,\n        isSplitEnable: isSplitEnable,\n        isShowHideEnable: isShowHideEnable,\n        emptyCheckAnnotationItemWarningText: emptyCheckAnnotationItemWarningText,\n        emptyAnnotationReminderText: emptyAnnotationReminderText,\n        onVideoReady: this.handleVideoReady,\n        onVideoProgress: this.handleVideoProgress,\n        onVideoDuration: this.handleVideoDuration,\n        onVideoEnded: this.handleVideoEnded,\n        onVideoSliderMouseUp: this.handleVideoSliderMouseUp,\n        onVideoSliderMouseDown: this.handleVideoSliderMouseDown,\n        onVideoSliderChange: this.handleVideoSliderChange,\n        onVideoRewind: this.handleVideoRewind,\n        onVideoPlayPause: this.handleVideoPlayPause,\n        onVideoSpeedChange: this.handleVideoSpeedChange,\n        onCanvasStageMouseDown: this.handleCanvasStageMouseDown,\n        onCanvasGroupMouseDown: this.handleCanvasGroupMouseDown,\n        onCanvasGroupDragEnd: this.handleCanvasGroupDragEnd,\n        onCanvasDotMouseDown: this.handleCanvasDotMouseDown,\n        onCanvasDotDragEnd: this.handleCanvasDotDragEnd,\n        onAnnotationItemClick: this.handleAnnotationItemClick,\n        onAnnotationDeleteClick: this.handleListAnnotationDelete,\n        onAnnotationShowHideClick: this.handleListAnnotationShowHide,\n        onAnnotationSplitClick: this.handleListAnnotationSplit,\n        onIncidentItemClick: this.handleIncidentItemClick,\n        onIncidentItemDeleteClick: this.handleIncidentItemDelete\n      };\n      var controlPanelUI = null;\n\n      if (isSubmitted) {\n        controlPanelUI = __jsx(Review, {\n          height: annotationHeight,\n          onConfirmSubmit: this.handleSubmit,\n          onCancelSubmit: this.handleReviewCancelSubmission\n        });\n      } else if (isPreviewed) {\n        controlPanelUI = __jsx(\"div\", null, __jsx(\"div\", {\n          className: \"pb-3 clearfix\"\n        }, this.renderAddButtonUI(), __jsx(Button, {\n          color: \"primary\",\n          style: this.buttonStyles,\n          onClick: this.handleShowCurrent,\n          className: \"d-flex align-items-center float-left\"\n        }, \"Hide Other Boxes\"), __jsx(ButtonGroup, {\n          className: \"float-right\"\n        }, __jsx(Button, {\n          disabled: this.UndoRedoState.previous.length === 0,\n          outline: true,\n          onClick: this.handleUndo\n        }, __jsx(MdUndo, null)), __jsx(Button, {\n          disabled: this.UndoRedoState.next.length === 0,\n          outline: true,\n          onClick: this.handleRedo\n        }, __jsx(MdRedo, null)))), __jsx(AnnotationList, null));\n      } else {\n        controlPanelUI = __jsx(Preview, {\n          height: annotationHeight,\n          notices: previewNoticeList,\n          header: previewHeader,\n          onPreviewClick: this.handlePreviewClick\n        });\n      }\n\n      var rootClassName = \"two-dimensional-video\".concat(className ? \" \".concat(className) : '');\n      return __jsx(I18nextProvider, {\n        i18n: i18nextInstance\n      }, __jsx(TwoDimensionalVideoContext.Provider, {\n        value: twoDimensionalVideoContext\n      }, __jsx(\"div\", {\n        className: rootClassName\n      }, __jsx(\"div\", {\n        className: \"d-flex flex-wrap justify-content-around py-3 two-dimensional-video__main\"\n      }, __jsx(\"div\", {\n        className: \"mb-3\",\n        style: {\n          width: videoWidth\n        }\n      }, __jsx(DrawableVideoPlayer, null)), __jsx(\"div\", {\n        className: \"mb-3 two-dimensional-video__control-panel\"\n      }, controlPanelUI)), __jsx(\"div\", {\n        className: \"d-flex justify-content-center pt-3\"\n      }, isSubmitted || !isPreviewed ? '' : __jsx(\"div\", null, __jsx(Button, {\n        onClick: this.handleSubmit\n      }, \"Submit\"))), __jsx(PopupDialog, {\n        isOpen: isDialogOpen,\n        title: dialogTitle,\n        message: dialogMessage,\n        onToggle: this.handleDialogToggle,\n        hasCloseButton: true\n      }))));\n    }\n  }]);\n\n  return TwoDimensionalVideo;\n}(Component);\n\nTwoDimensionalVideo.defaultProps = {\n  className: '',\n  defaultAnnotations: [],\n  videoWidth: 400,\n  isDefaultAnnotationsManipulatable: false,\n  previewHeader: '',\n  previewNoticeList: [],\n  isEmptyCheckEnable: false,\n  isSplitEnable: false,\n  isShowHideEnable: false,\n  hasReview: false,\n  url: '',\n  numAnnotationsCanBeAdded: 1000,\n  onSubmit: function onSubmit() {},\n  emptyCheckSubmissionWarningText: '',\n  emptyCheckAnnotationItemWarningText: '',\n  emptyAnnotationReminderText: ''\n};\nexport default TwoDimensionalVideo;","map":null,"metadata":{},"sourceType":"module"}