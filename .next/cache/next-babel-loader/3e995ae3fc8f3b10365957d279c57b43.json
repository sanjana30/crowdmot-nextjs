{"ast":null,"code":"function _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar getAnnotationIdByLabel = function getAnnotationIdByLabel(label, annotations, entities) {\n  return annotations.find(function (ann) {\n    return entities.annotations[ann].label === label;\n  });\n};\n\nvar getSubAnnotations = function getSubAnnotations(i, annotations, entities) {\n  var result = [];\n  var queue = [];\n  var id = getAnnotationIdByLabel(\"\".concat(i), annotations, entities);\n\n  if (id) {\n    queue.push(id);\n    result.push(id);\n  }\n\n  while (queue.length > 0) {\n    var ann = queue.shift();\n\n    var _iterator = _createForOfIteratorHelper(entities.annotations[ann].childrenNames),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n        result.push(c);\n        queue.push(c);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return result;\n};\n\nvar getSortedAnnotationsByLabel = function getSortedAnnotationsByLabel(annotations, entities) {\n  var sortedAnnotations = [];\n  var i = 1;\n\n  while (sortedAnnotations.length < annotations.length && i <= annotations.length) {\n    var subAnnotations = getSubAnnotations(i, annotations, entities);\n    sortedAnnotations = subAnnotations.concat(sortedAnnotations);\n    i += 1;\n  }\n\n  return sortedAnnotations;\n};\n\nvar getLastAnnotationLabel = function getLastAnnotationLabel(annotations, entities) {\n  var i = 0;\n\n  while (i < annotations.length) {\n    var id = getAnnotationIdByLabel(\"\".concat(i + 1), annotations, entities);\n    if (!id) return i;\n    i += 1;\n  }\n\n  return i;\n};\n\nvar getUniqueKey = function getUniqueKey() {\n  return new Date().getTime().toString(36);\n};\n\nexport { getSortedAnnotationsByLabel, getLastAnnotationLabel, getUniqueKey };","map":null,"metadata":{},"sourceType":"module"}