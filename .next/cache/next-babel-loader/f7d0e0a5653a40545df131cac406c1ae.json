{"ast":null,"code":"import { getLinearInterpolatedValue } from 'shared/utils/mathUtils';\nconst INTERPOLATION_TYPE = {\n  LENGTH: 'LENG',\n  POSITION: 'POS'\n};\n\nconst getInterpolatedData = ({\n  startIncident,\n  endIncident,\n  currentTime,\n  type\n}) => {\n  const interpolated = {};\n\n  switch (type) {\n    case INTERPOLATION_TYPE.LENGTH:\n      interpolated.width = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.width, startIncident.width, currentTime);\n      interpolated.height = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.height, startIncident.height, currentTime);\n      break;\n\n    case INTERPOLATION_TYPE.POSITION:\n      interpolated.x = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.x, startIncident.x, currentTime);\n      interpolated.y = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.y, startIncident.y, currentTime);\n      break;\n\n    default:\n      break;\n  }\n\n  return interpolated;\n};\n\nexport { getInterpolatedData, INTERPOLATION_TYPE };","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/components/two-dimensional-video/utils/interpolationUtils.js"],"names":["getLinearInterpolatedValue","INTERPOLATION_TYPE","LENGTH","POSITION","getInterpolatedData","startIncident","endIncident","currentTime","type","interpolated","width","time","height","x","y"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,wBAA3C;AAEA,MAAMC,kBAAkB,GAAG;AAC1BC,EAAAA,MAAM,EAAE,MADkB;AAE1BC,EAAAA,QAAQ,EAAE;AAFgB,CAA3B;;AAKA,MAAMC,mBAAmB,GAAG,CAAC;AAC5BC,EAAAA,aAD4B;AACbC,EAAAA,WADa;AACAC,EAAAA,WADA;AACaC,EAAAA;AADb,CAAD,KAEtB;AACL,QAAMC,YAAY,GAAG,EAArB;;AACA,UAAQD,IAAR;AACA,SAAKP,kBAAkB,CAACC,MAAxB;AACCO,MAAAA,YAAY,CAACC,KAAb,GAAqBV,0BAA0B,CAACM,WAAW,CAACK,IAAb,EAAmBN,aAAa,CAACM,IAAjC,EAAuCL,WAAW,CAACI,KAAnD,EAA0DL,aAAa,CAACK,KAAxE,EAA+EH,WAA/E,CAA/C;AACAE,MAAAA,YAAY,CAACG,MAAb,GAAsBZ,0BAA0B,CAACM,WAAW,CAACK,IAAb,EAAmBN,aAAa,CAACM,IAAjC,EAAuCL,WAAW,CAACM,MAAnD,EAA2DP,aAAa,CAACO,MAAzE,EAAiFL,WAAjF,CAAhD;AACA;;AACD,SAAKN,kBAAkB,CAACE,QAAxB;AACCM,MAAAA,YAAY,CAACI,CAAb,GAAiBb,0BAA0B,CAACM,WAAW,CAACK,IAAb,EAAmBN,aAAa,CAACM,IAAjC,EAAuCL,WAAW,CAACO,CAAnD,EAAsDR,aAAa,CAACQ,CAApE,EAAuEN,WAAvE,CAA3C;AACAE,MAAAA,YAAY,CAACK,CAAb,GAAiBd,0BAA0B,CAACM,WAAW,CAACK,IAAb,EAAmBN,aAAa,CAACM,IAAjC,EAAuCL,WAAW,CAACQ,CAAnD,EAAsDT,aAAa,CAACS,CAApE,EAAuEP,WAAvE,CAA3C;AACA;;AACD;AACC;AAVD;;AAYA,SAAOE,YAAP;AACA,CAjBD;;AAmBA,SAASL,mBAAT,EAA8BH,kBAA9B","sourcesContent":["import { getLinearInterpolatedValue } from 'shared/utils/mathUtils';\n\nconst INTERPOLATION_TYPE = {\n\tLENGTH: 'LENG',\n\tPOSITION: 'POS',\n};\n\nconst getInterpolatedData = ({\n\tstartIncident, endIncident, currentTime, type,\n}) => {\n\tconst interpolated = {};\n\tswitch (type) {\n\tcase INTERPOLATION_TYPE.LENGTH:\n\t\tinterpolated.width = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.width, startIncident.width, currentTime);\n\t\tinterpolated.height = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.height, startIncident.height, currentTime);\n\t\tbreak;\n\tcase INTERPOLATION_TYPE.POSITION:\n\t\tinterpolated.x = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.x, startIncident.x, currentTime);\n\t\tinterpolated.y = getLinearInterpolatedValue(endIncident.time, startIncident.time, endIncident.y, startIncident.y, currentTime);\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n\t}\n\treturn interpolated;\n};\n\nexport { getInterpolatedData, INTERPOLATION_TYPE };\n"]},"metadata":{},"sourceType":"module"}