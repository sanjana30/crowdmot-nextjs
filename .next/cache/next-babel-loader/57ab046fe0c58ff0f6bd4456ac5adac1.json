{"ast":null,"code":"import { withBasicIdentities } from '../../../shared/models/node/index';\n\nconst canClearRedundantIncidents = state => ({\n  clearRedundantIncidents: status => {\n    const {\n      incidents\n    } = state;\n\n    for (let i = incidents.length - 1; i > 0; i -= 1) {\n      if (incidents[i].status === status && incidents[i].status === incidents[i - 1].status) {\n        incidents.splice(i, 1);\n      }\n    }\n  }\n});\n\nconst Rectangle = ({\n  id,\n  name,\n  label,\n  color,\n  isManipulatable = true,\n  incidents = [],\n  childrenNames = [],\n  parentName = ''\n}) => {\n  const state = {\n    color,\n    isManipulatable,\n    incidents,\n    childrenNames,\n    parentName\n  };\n  return Object.assign(state, withBasicIdentities({\n    id,\n    name,\n    label\n  }), canClearRedundantIncidents(state));\n};\n\nexport { Rectangle };","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/components/two-dimensional-video/models/rectangle/index.js"],"names":["withBasicIdentities","canClearRedundantIncidents","state","clearRedundantIncidents","status","incidents","i","length","splice","Rectangle","id","name","label","color","isManipulatable","childrenNames","parentName","Object","assign"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,mCAApC;;AAEA,MAAMC,0BAA0B,GAAGC,KAAK,KAAK;AAC5CC,EAAAA,uBAAuB,EAAGC,MAAD,IAAY;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAgBH,KAAtB;;AACA,SAAK,IAAII,CAAC,GAAGD,SAAS,CAACE,MAAV,GAAmB,CAAhC,EAAmCD,CAAC,GAAG,CAAvC,EAA0CA,CAAC,IAAI,CAA/C,EAAkD;AACjD,UAAID,SAAS,CAACC,CAAD,CAAT,CAAaF,MAAb,KAAwBA,MAAxB,IAAkCC,SAAS,CAACC,CAAD,CAAT,CAAaF,MAAb,KAAwBC,SAAS,CAACC,CAAC,GAAG,CAAL,CAAT,CAAiBF,MAA/E,EAAuF;AACtFC,QAAAA,SAAS,CAACG,MAAV,CAAiBF,CAAjB,EAAoB,CAApB;AACA;AACD;AACD;AAR2C,CAAL,CAAxC;;AAWA,MAAMG,SAAS,GAAG,CAAC;AAClBC,EAAAA,EADkB;AAElBC,EAAAA,IAFkB;AAGlBC,EAAAA,KAHkB;AAIlBC,EAAAA,KAJkB;AAKlBC,EAAAA,eAAe,GAAG,IALA;AAMlBT,EAAAA,SAAS,GAAG,EANM;AAOlBU,EAAAA,aAAa,GAAG,EAPE;AAQlBC,EAAAA,UAAU,GAAG;AARK,CAAD,KASZ;AACL,QAAMd,KAAK,GAAG;AACbW,IAAAA,KADa;AAEbC,IAAAA,eAFa;AAGbT,IAAAA,SAHa;AAIbU,IAAAA,aAJa;AAKbC,IAAAA;AALa,GAAd;AAOA,SAAOC,MAAM,CAACC,MAAP,CAAchB,KAAd,EAAqBF,mBAAmB,CAAC;AAAEU,IAAAA,EAAF;AAAMC,IAAAA,IAAN;AAAYC,IAAAA;AAAZ,GAAD,CAAxC,EAA+DX,0BAA0B,CAACC,KAAD,CAAzF,CAAP;AACA,CAlBD;;AAoBA,SACCO,SADD","sourcesContent":["import { withBasicIdentities } from '../../../shared/models/node/index';\n\nconst canClearRedundantIncidents = state => ({\n\tclearRedundantIncidents: (status) => {\n\t\tconst { incidents } = state;\n\t\tfor (let i = incidents.length - 1; i > 0; i -= 1) {\n\t\t\tif (incidents[i].status === status && incidents[i].status === incidents[i - 1].status) {\n\t\t\t\tincidents.splice(i, 1);\n\t\t\t}\n\t\t}\n\t},\n});\n\nconst Rectangle = ({\n\tid,\n\tname,\n\tlabel,\n\tcolor,\n\tisManipulatable = true,\n\tincidents = [],\n\tchildrenNames = [],\n\tparentName = '',\n}) => {\n\tconst state = {\n\t\tcolor,\n\t\tisManipulatable,\n\t\tincidents,\n\t\tchildrenNames,\n\t\tparentName,\n\t};\n\treturn Object.assign(state, withBasicIdentities({ id, name, label }), canClearRedundantIncidents(state));\n};\n\nexport {\n\tRectangle,\n};\n"]},"metadata":{},"sourceType":"module"}