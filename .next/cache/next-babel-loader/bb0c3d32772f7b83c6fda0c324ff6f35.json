{"ast":null,"code":"import jwt from \"jsonwebtoken\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookies from \"cookies\";\nimport DatabaseService from \"./database\";\nimport User from \"../models/User\";\n\nasync function createUser(pwd) {\n  const request = await fetch(\"https://paassword.now.sh/api/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      pwd\n    })\n  });\n\n  if (request.ok) {\n    const {\n      id\n    } = await request.json();\n    return id;\n  }\n}\n\nasync function validatePassword(passwordId, pwd) {\n  const request = await fetch(`https://paassword.now.sh/api/get/${passwordId}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      pwd\n    })\n  });\n\n  if (request.ok) {\n    const {\n      valid\n    } = await request.json();\n    return valid;\n  }\n} // Sign our JWT / encrypting\n\n\nfunction sign(payload) {\n  return new Promise((resolve, reject) => {\n    jwt.sign(payload, process.env.SECRET || \"secret\", {\n      expiresIn: \"1d\"\n    }, (err, token) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(token);\n    });\n  });\n} // Veriy\n\n\nfunction verify(token) {\n  return new Promise((resolve, reject) => {\n    jwt.verify(token, process.env.SECRET || \"secret\", (err, payload) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(payload);\n    });\n  });\n}\n\nasync function getUserFromCookie(req) {\n  const cookies = new Cookies(req);\n  let payload;\n\n  try {\n    payload = await verify(cookies.get(\"_wsp\"));\n  } catch (error) {\n    return null;\n  }\n\n  DatabaseService.connect();\n  const user = await User.findOne({\n    _id: payload.id\n  });\n  console.log(\"returned user is: \" + user);\n  return JSON.parse(JSON.stringify(user));\n}\n\nexport default {\n  createUser,\n  validatePassword,\n  sign,\n  verify,\n  getUserFromCookie\n};","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/services/auth.js"],"names":["jwt","fetch","Cookies","DatabaseService","User","createUser","pwd","request","method","headers","body","JSON","stringify","ok","id","json","validatePassword","passwordId","valid","sign","payload","Promise","resolve","reject","process","env","SECRET","expiresIn","err","token","verify","getUserFromCookie","req","cookies","get","error","connect","user","findOne","_id","console","log","parse"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport fetch from \"isomorphic-unfetch\";\nimport Cookies from \"cookies\";\nimport DatabaseService from \"./database\";\nimport User from \"../models/User\";\n\nasync function createUser(pwd) {\n  const request = await fetch(\"https://paassword.now.sh/api/create\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ pwd }),\n  });\n\n  if (request.ok) {\n    const { id } = await request.json();\n\n    return id;\n  }\n}\n\nasync function validatePassword(passwordId, pwd) {\n  const request = await fetch(\n    `https://paassword.now.sh/api/get/${passwordId}`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ pwd }),\n    }\n  );\n\n  if (request.ok) {\n    const { valid } = await request.json();\n\n    return valid;\n  }\n}\n\n// Sign our JWT / encrypting\nfunction sign(payload) {\n  return new Promise((resolve, reject) => {\n    jwt.sign(\n      payload,\n      process.env.SECRET || \"secret\",\n      {\n        expiresIn: \"1d\",\n      },\n      (err, token) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(token);\n      }\n    );\n  });\n}\n\n// Veriy\nfunction verify(token) {\n  return new Promise((resolve, reject) => {\n    jwt.verify(token, process.env.SECRET || \"secret\", (err, payload) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(payload);\n    });\n  });\n}\n\nasync function getUserFromCookie(req) {\n  const cookies = new Cookies(req);\n\n  let payload;\n\n  try {\n    payload = await verify(cookies.get(\"_wsp\"));\n  } catch (error) {\n    return null;\n  }\n\n  DatabaseService.connect();\n\n  const user = await User.findOne({ _id: payload.id });\n  console.log(\"returned user is: \"+user)\n  return JSON.parse(JSON.stringify(user));\n  \n}\n\nexport default {\n  createUser,\n  validatePassword,\n  sign,\n  verify,\n  getUserFromCookie,\n};"]},"metadata":{},"sourceType":"module"}