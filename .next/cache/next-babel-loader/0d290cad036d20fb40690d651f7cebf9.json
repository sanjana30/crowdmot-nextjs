{"ast":null,"code":"var _jsxFileName = \"/Applications/CrowdMOT/crowdmot-nextjs/components/two-dimensional-video/components/VideoPlayer/FormattedTime/FormattedTime.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst pad = (string, digits) => ('0'.repeat(digits - 1) + string).slice(-digits);\n\nconst format = seconds => {\n  const date = new Date(seconds * 1000);\n  const hh = date.getUTCHours();\n  const mm = pad(date.getUTCMinutes(), 2);\n  const ss = pad(date.getUTCSeconds(), 2);\n  const ms = pad(date.getUTCMilliseconds(), 3);\n\n  if (hh) {\n    return `${hh}:${mm}:${ss}:${ms}`;\n  }\n\n  return `${mm}:${ss}:${ms}`;\n};\n\nconst FormattedTime = ({\n  className,\n  seconds\n}) => __jsx(\"time\", {\n  dateTime: `P${Math.round(seconds)}S`,\n  className: className,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 2\n  }\n}, format(seconds));\n\nFormattedTime.propTypes = {\n  className: PropTypes.string,\n  seconds: PropTypes.number\n};\nFormattedTime.defaultProps = {\n  className: '',\n  seconds: 0\n};\nexport default FormattedTime;","map":{"version":3,"sources":["/Applications/CrowdMOT/crowdmot-nextjs/components/two-dimensional-video/components/VideoPlayer/FormattedTime/FormattedTime.jsx"],"names":["React","PropTypes","pad","string","digits","repeat","slice","format","seconds","date","Date","hh","getUTCHours","mm","getUTCMinutes","ss","getUTCSeconds","ms","getUTCMilliseconds","FormattedTime","className","Math","round","propTypes","number","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,GAAG,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB,CAAC,IAAIC,MAAJ,CAAWD,MAAM,GAAG,CAApB,IAAyBD,MAA1B,EAAkCG,KAAlC,CAAwC,CAACF,MAAzC,CAAhC;;AAEA,MAAMG,MAAM,GAAIC,OAAD,IAAa;AAC3B,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,OAAO,GAAG,IAAnB,CAAb;AACA,QAAMG,EAAE,GAAGF,IAAI,CAACG,WAAL,EAAX;AACA,QAAMC,EAAE,GAAGX,GAAG,CAACO,IAAI,CAACK,aAAL,EAAD,EAAuB,CAAvB,CAAd;AACA,QAAMC,EAAE,GAAGb,GAAG,CAACO,IAAI,CAACO,aAAL,EAAD,EAAuB,CAAvB,CAAd;AACA,QAAMC,EAAE,GAAGf,GAAG,CAACO,IAAI,CAACS,kBAAL,EAAD,EAA4B,CAA5B,CAAd;;AACA,MAAIP,EAAJ,EAAQ;AACP,WAAQ,GAAEA,EAAG,IAAGE,EAAG,IAAGE,EAAG,IAAGE,EAAG,EAA/B;AACA;;AACD,SAAQ,GAAEJ,EAAG,IAAGE,EAAG,IAAGE,EAAG,EAAzB;AACA,CAVD;;AAYA,MAAME,aAAa,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaZ,EAAAA;AAAb,CAAD,KACrB;AAAM,EAAA,QAAQ,EAAI,IAAGa,IAAI,CAACC,KAAL,CAAWd,OAAX,CAAoB,GAAzC;AAA8C,EAAA,SAAS,EAAGY,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGb,MAAM,CAACC,OAAD,CADT,CADD;;AAMAW,aAAa,CAACI,SAAd,GAA0B;AACzBH,EAAAA,SAAS,EAAEnB,SAAS,CAACE,MADI;AAEzBK,EAAAA,OAAO,EAAEP,SAAS,CAACuB;AAFM,CAA1B;AAIAL,aAAa,CAACM,YAAd,GAA6B;AAC5BL,EAAAA,SAAS,EAAE,EADiB;AAE5BZ,EAAAA,OAAO,EAAE;AAFmB,CAA7B;AAKA,eAAeW,aAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst pad = (string, digits) => ('0'.repeat(digits - 1) + string).slice(-digits);\n\nconst format = (seconds) => {\n\tconst date = new Date(seconds * 1000);\n\tconst hh = date.getUTCHours();\n\tconst mm = pad(date.getUTCMinutes(), 2);\n\tconst ss = pad(date.getUTCSeconds(), 2);\n\tconst ms = pad(date.getUTCMilliseconds(), 3);\n\tif (hh) {\n\t\treturn `${hh}:${mm}:${ss}:${ms}`;\n\t}\n\treturn `${mm}:${ss}:${ms}`;\n};\n\nconst FormattedTime = ({ className, seconds }) => (\n\t<time dateTime={ `P${Math.round(seconds)}S` } className={ className }>\n\t\t{ format(seconds) }\n\t</time>\n);\n\nFormattedTime.propTypes = {\n\tclassName: PropTypes.string,\n\tseconds: PropTypes.number,\n};\nFormattedTime.defaultProps = {\n\tclassName: '',\n\tseconds: 0,\n};\n\nexport default FormattedTime;\n"]},"metadata":{},"sourceType":"module"}